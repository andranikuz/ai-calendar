import { test, expect } from '@playwright/test';

test.describe('Mood Tracking', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/moods');
  });

  test('should redirect to login when not authenticated', async ({ page }) => {
    await expect(page).toHaveURL(/.*login/);
  });

  test('should display mood tracking interface (if authenticated)', async ({ page }) => {
    // Skip if redirected to login
    if (await page.locator('text=/sign in|login|–≤–æ–π—Ç–∏/i').isVisible()) {
      test.skip('Mood tracking requires authentication');
    }

    // Check for mood page elements
    await expect(page.locator('h1, h2, .page-title').first()).toBeVisible();
    
    // Look for mood-related elements
    const moodElements = [
      'Mood', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      'How are you feeling', '–ö–∞–∫ –¥–µ–ª–∞',
      'Track mood', '–û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
    ];
    
    let foundElement = false;
    for (const element of moodElements) {
      if (await page.locator(`text=${element}`).isVisible()) {
        foundElement = true;
        break;
      }
    }
    
    if (foundElement) {
      await expect(page.locator('text=/Mood|–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/i')).toBeVisible();
    }
  });

  test('should display emoji mood selector (if authenticated)', async ({ page }) => {
    // Skip if redirected to login
    if (await page.locator('text=/sign in|login|–≤–æ–π—Ç–∏/i').isVisible()) {
      test.skip('Mood tracking requires authentication');
    }

    // Look for emoji selectors (typical mood emojis)
    const moodEmojis = ['üò¢', 'üòî', 'üòê', 'üòä', 'üòÑ', 'üôÇ', 'üòÉ', 'ü•∫', 'üò≠'];
    
    let foundEmoji = false;
    for (const emoji of moodEmojis) {
      if (await page.locator(`text=${emoji}`).isVisible()) {
        foundEmoji = true;
        break;
      }
    }
    
    if (foundEmoji) {
      // Test emoji interaction
      const firstEmoji = page.locator('text=üòä, text=üòÑ, text=üôÇ').first();
      if (await firstEmoji.isVisible()) {
        await firstEmoji.click();
        
        // Should show some feedback after selection
        await expect(page.locator('text=/selected|saved|–≤—ã–±—Ä–∞–Ω–æ|—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/i')).toBeVisible({ timeout: 3000 });
      }
    }
  });

  test('should display mood calendar/history (if authenticated)', async ({ page }) => {
    // Skip if redirected to login
    if (await page.locator('text=/sign in|login|–≤–æ–π—Ç–∏/i').isVisible()) {
      test.skip('Mood tracking requires authentication');
    }

    // Look for calendar or history view
    const historyElements = [
      '.mood-calendar',
      '.mood-history',
      '.calendar',
      'History', '–ò—Å—Ç–æ—Ä–∏—è',
      'Calendar', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'
    ];

    let foundHistory = false;
    for (const element of historyElements) {
      if (typeof element === 'string' && element.startsWith('.')) {
        if (await page.locator(element).isVisible()) {
          foundHistory = true;
          break;
        }
      } else if (await page.locator(`text=${element}`).isVisible()) {
        foundHistory = true;
        break;
      }
    }

    if (foundHistory) {
      // Should show some form of mood history
      await expect(page.locator('.calendar, .history, text=/History|Calendar|–ò—Å—Ç–æ—Ä–∏—è|–ö–∞–ª–µ–Ω–¥–∞—Ä—å/i')).toBeVisible();
    }
  });

  test('should show mood statistics (if authenticated)', async ({ page }) => {
    // Skip if redirected to login
    if (await page.locator('text=/sign in|login|–≤–æ–π—Ç–∏/i').isVisible()) {
      test.skip('Mood tracking requires authentication');
    }

    // Look for statistics/analytics
    const statsElements = [
      'Statistics', 'Stats', 'Analytics',
      '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      'Average', '–°—Ä–µ–¥–Ω–µ–µ',
      'Trend', '–¢—Ä–µ–Ω–¥'
    ];

    let foundStats = false;
    for (const element of statsElements) {
      if (await page.locator(`text=${element}`).isVisible()) {
        foundStats = true;
        break;
      }
    }

    if (foundStats) {
      await expect(page.locator('text=/Statistics|Analytics|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–ê–Ω–∞–ª–∏—Ç–∏–∫–∞/i')).toBeVisible();
    }
  });
});